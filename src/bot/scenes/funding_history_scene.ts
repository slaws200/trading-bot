import { Scenes } from "telegraf";
import { msgToAdmin } from "../utils/msgToAdmin";
import { getFundingHistory } from "../../api/getFundingRateHistory";

interface ScContext extends Scenes.SceneContext {
  myProp?: string;
}

export const funding_history_scene = new Scenes.BaseScene<ScContext>(
  "funding_history_scene"
);

funding_history_scene.enter(async (ctx) => {
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä BTC, SOL –∏–ª–∏ ETH", {
    reply_markup: {
      keyboard: [[{ text: "–í—ã–π—Ç–∏ –∏–∑ —Ñ–æ—Ä–º—ã" }]],
      resize_keyboard: true,
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
funding_history_scene.on("text", async (ctx) => {
  if (ctx.message.text === "–í—ã–π—Ç–∏ –∏–∑ —Ñ–æ—Ä–º—ã") {
    await ctx.reply("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", {
      reply_markup: { remove_keyboard: true },
    });
    return ctx.scene.leave();
  }
  if (ctx.message.text.startsWith("/")) {
    return ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –∫–æ–º–∞–Ω–¥—É");
  }
  try {
    const res = await getFundingHistory(
      ctx.message.text.toUpperCase() + "USDT",
      10
    );
    let msg = `üìä Funding history for ${ctx.message.text.toUpperCase() + "USDT"}:\n\n`;
    res.forEach((h: any) => {
      msg += `${h.fundingTime} ‚Üí ${(h.fundingRate * 100).toFixed(3)}%${
        h.fundingRate > 0 ? "üìà" : "üìâ"
      }\n`;
    });
    await ctx.reply(msg, {
      reply_markup: { remove_keyboard: true },
    });
  } catch (error) {
    if(error instanceof Error){
      await ctx.reply(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–µ - ${error.message}`, {
        reply_markup: { remove_keyboard: true },
      });
    }
  } finally {
    return ctx.scene.leave();
  }
});
